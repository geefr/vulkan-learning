#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(constant_id = 0) const uint computeBufferWidth = 1000;
layout(constant_id = 1) const uint computeBufferHeight = 1;
layout(constant_id = 2) const uint computeBufferDepth = 1;
layout(constant_id = 3) const uint computeGroupSizeX = 1;
layout(constant_id = 4) const uint computeGroupSizeY = 1;
layout(constant_id = 5) const uint computeGroupSizeZ = 1;

struct Particle {
  vec4 position;
  vec4 velocity;
  vec4 force;
  vec4 colour;
  float mass;
  float radius;
  float pad2;
  float pad3;
};

// Work group size
// For a simple example mainly arbitrary, but for more complex stuff would matter
// Invocations within a work group can communicate via some variables/methods
// so group size would be like the block size in an image compression algorithm or such
// Syntax here sets sizes to be defined by the specialisation constants above
layout(local_size_x_id = 3, local_size_y_id = 4, local_size_z_id = 5) in;

layout(binding = 0) buffer inputParticles {
  Particle inParticles[];
};

layout(binding = 1) buffer outputBuffer {
  Particle outParticles[];
};

void main(){
  // Some unnecesary threads are launched in order to fit work into workgroups, terminate them
  if( gl_GlobalInvocationID.x >= computeBufferWidth || gl_GlobalInvocationID.y >= computeBufferHeight || gl_GlobalInvocationID.z >= computeBufferDepth )
    return;

  // Fetch the input data
  uint i = (computeBufferWidth * gl_GlobalInvocationID.y) + gl_GlobalInvocationID.x;
  Particle part = inParticles[i];

  vec4 startPos = part.position;

  // TODO: Actual physics
  float dT = 0.1;
  vec4 grav = vec4(0,-0.01,0,1);
  float m = part.mass;

  vec4 f = part.force + (grav * m);

  vec4 a = f / m;
  vec4 v = part.velocity + (a * dT);
  vec4 p = part.position + (v * dT);

  if( p.y < -100 ) {
    p.y = startPos.y;
    v = reflect(v * 0.9, vec4(0,1,0,0));
  }

  if( p.x < -100 ) {
    p.x = startPos.x;
    v = reflect(v * 0.9, vec4(1,0,0,0));
  }
  if( p.x > 100 ) {
    p.x = startPos.x;
    v = reflect(v * 0.9, vec4(-1,0,0,0));
  }

  if( p.z < -100 ) {
    p.z = startPos.z;
    v = reflect(v * 0.9, vec4(0,0,-1,0));
  }
  if( p.z > 100 ) {
    p.z = startPos.z;
    v = reflect(v * 0.9, vec4(0,0,1,0));
  }

  outParticles[i].position = p;
  outParticles[i].velocity = v;
  outParticles[i].force = f;
  outParticles[i].colour = inParticles[i].colour;
  outParticles[i].mass = inParticles[i].mass;
}
